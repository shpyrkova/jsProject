// функции
// переменные (let и const), созданные внутри функции, называются локальными переменными и недоступны за её пределами.
// переменные, созданные за пределами функции, - глобальные.

"user strict";

let num = 20;

// FUNCTION DECLARATION - функции вида "function name() {код}". они могут быть объявлены ПОСЛЕ их вызова. 
// при отрисовке html браузер сначала находит все function declaration, создает их, и только потом выполняет код. 

function showFirstMessage(text) {
    console.log(text);
    let num = 10;  // если бы num не было объявлено, вывела бы 20. 
    console.log(num); // выведет 10. функция сначала ищет значение переменной внутри себя, а потом - за пределами.
}
// замыкание функции - это сама функция со всеми внешними переменными, которые ей доступны  

showFirstMessage("Hello, World!");
console.log(num); // выведет 20. переменная внутри функции НЕДОСТУПНА 

function calc(a, b) {
    return(a + b); // возвращает значение и ВЫХОДИТ из функции
    console.log('unreachable'); // этот код уже не выполнится, так как стоит после return 
}
console.log(calc(3, 7));

function ret() {
    let num = 50; // вернет значение своей локальной переменной наружу.
    return num;  // удобно, когда внутри много расчетов и нужно достать ответ
}

const anotherNum = ret();
console.log(anotherNum);

// FUNCTION EXPRESSION - вида "const foo = function name() {код}". (переменная = функция). 
// сначала должна быть объявлена, а потом вызвана. (потому что это на самом деле переменная)
// переменные создаются только когда до них доходит код, а не в начале, как FUNCTION DECLARATION 

const logger = function() {
    console.log("Hello!");
};
logger();

// СТРЕЛОЧНАЯ ФУНКЦИЯ (добавлена в 2016г в ES6) 
// не имеет контекста вызова. чаще всего встречается в обработчике событий. везде использовать нельзя. 

const calc2 = (a, b) => { // (a, b) - обычные аргументы 
    return a + b; 
};  
const calc3 = (a, b) =>  a + b ; // можно опускать скобки и return, если записана в одну строку.